-----------------------------------------------
-- Loader Section (Place in StarterPlayerScripts)
-----------------------------------------------
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local localPlayer = Players.LocalPlayer

-- Create the ScreenGui
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "LoaderGui"
screenGui.ResetOnSpawn = false
screenGui.Parent = localPlayer:WaitForChild("PlayerGui")

-- Main frame (black background, draggable, partially transparent, with rounded corners)
local mainFrame = Instance.new("Frame")
mainFrame.Name = "LoaderFrame"
mainFrame.Size = UDim2.new(0, 400, 0, 250)
mainFrame.Position = UDim2.new(0.5, -200, 0.5, -125)
mainFrame.BackgroundColor3 = Color3.new(0, 0, 0)
mainFrame.BackgroundTransparency = 0.2
mainFrame.Active = true
mainFrame.Parent = screenGui

local mainCorner = Instance.new("UICorner")
mainCorner.CornerRadius = UDim.new(0, 10)
mainCorner.Parent = mainFrame

-- Draggable implementation
local dragging, dragInput, dragStart, startPos
local function update(input)
	local delta = input.Position - dragStart
	mainFrame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X,
	                                 startPos.Y.Scale, startPos.Y.Offset + delta.Y)
end

mainFrame.InputBegan:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
		dragging = true
		dragStart = input.Position
		startPos = mainFrame.Position
		input.Changed:Connect(function()
			if input.UserInputState == Enum.UserInputState.End then
				dragging = false
			end
		end)
	end
end)

mainFrame.InputChanged:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
		dragInput = input
	end
end)

RunService.RenderStepped:Connect(function()
	if dragging and dragInput then
		update(dragInput)
	end
end)

-- Progress bar setup with gradient and rounded corners
local progressBarBackground = Instance.new("Frame")
progressBarBackground.Name = "ProgressBarBackground"
progressBarBackground.Size = UDim2.new(0.9, 0, 0, 25)
progressBarBackground.Position = UDim2.new(0.05, 0, 0.1, 0)
progressBarBackground.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
progressBarBackground.BackgroundTransparency = 0.3
progressBarBackground.Parent = mainFrame

local pbCorner = Instance.new("UICorner")
pbCorner.CornerRadius = UDim.new(0, 5)
pbCorner.Parent = progressBarBackground

local progressBarFill = Instance.new("Frame")
progressBarFill.Name = "ProgressBarFill"
progressBarFill.Size = UDim2.new(0, 0, 1, 0)
progressBarFill.BackgroundColor3 = Color3.fromRGB(128, 0, 128)
progressBarFill.Parent = progressBarBackground

local pbFillCorner = Instance.new("UICorner")
pbFillCorner.CornerRadius = UDim.new(0, 5)
pbFillCorner.Parent = progressBarFill

-- Add a subtle gradient to the progress bar fill
local pbGradient = Instance.new("UIGradient")
pbGradient.Color = ColorSequence.new{
		ColorSequenceKeypoint.new(0, Color3.fromRGB(180, 0, 180)),
		ColorSequenceKeypoint.new(1, Color3.fromRGB(128, 0, 128))
	}
pbGradient.Parent = progressBarFill

-- Debug output using a ScrollingFrame (with transparency and rounded corners)
local debugFrame = Instance.new("ScrollingFrame")
debugFrame.Name = "DebugFrame"
debugFrame.Size = UDim2.new(0.9, 0, 0.65, 0)
debugFrame.Position = UDim2.new(0.05, 0, 0.25, 0)
debugFrame.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
debugFrame.BackgroundTransparency = 0.2
debugFrame.BorderSizePixel = 0
debugFrame.CanvasSize = UDim2.new(0, 0, 0, 0)
debugFrame.Parent = mainFrame

local debugCorner = Instance.new("UICorner")
debugCorner.CornerRadius = UDim.new(0, 8)
debugCorner.Parent = debugFrame

local DEBUG_LABEL_HEIGHT = 20
local debugCount = 0
local function addDebug(message)
	local label = Instance.new("TextLabel")
	label.Size = UDim2.new(1, 0, 0, DEBUG_LABEL_HEIGHT)
	label.BackgroundTransparency = 1
	label.TextColor3 = Color3.new(1, 1, 1)
	label.TextScaled = true
	label.Text = message
	label.Parent = debugFrame
	label.Position = UDim2.new(0, 0, 0, debugCount * DEBUG_LABEL_HEIGHT)
	debugCount = debugCount + 1
	debugFrame.CanvasSize = UDim2.new(0, 0, 0, debugCount * DEBUG_LABEL_HEIGHT)
	-- Automatically scroll to the bottom
	debugFrame.CanvasPosition = Vector2.new(0, math.max(0, debugCount * DEBUG_LABEL_HEIGHT - debugFrame.AbsoluteSize.Y))
end

-- Scan all folders for 3 seconds, showing all folder names.
local function scanGameObjects()
	local allObjects = game:GetDescendants()
	local total = #allObjects
	addDebug("Total objects: " .. total)
	
	local startTime = os.clock()
	local foundPath = nil
	
	for i, obj in ipairs(allObjects) do
		if obj:IsA("Folder") then
			addDebug(obj.Name)
			-- Check if this folder contains a child named after the LocalPlayer
			if not foundPath and obj:FindFirstChild(localPlayer.Name) then
				foundPath = obj:FindFirstChild(localPlayer.Name)
				addDebug("Found " .. localPlayer.Name .. " in " .. obj.Name)
			end
		end
		
		local progress = i / total
		progressBarFill:TweenSize(UDim2.new(progress, 0, 1, 0), "Out", "Linear", 0.005, true)
		
		if i % 100 == 0 then wait() end
		if os.clock() - startTime > 3 then
			addDebug("Timeout reached.")
			break
		end
	end
	
	if foundPath then
		getgenv().playerPath = foundPath
	else
		getgenv().playerPath = localPlayer
	end
end

spawn(function()
	addDebug("LocalPlayer: " .. localPlayer.Name)
	scanGameObjects()
	addDebug("Loader complete.")
	-- Tween the progress bar to full, if not already full.
	progressBarFill:TweenSize(UDim2.new(1, 0, 1, 0), "Out", "Linear", 0.1, true)
	wait(1)
	screenGui:Destroy()
end)

---------------------------------------------------
-- Wait until loader GUI is destroyed before continuing
---------------------------------------------------
while screenGui.Parent do wait() end

-----------------------------------------------
-- Main Script Section (MacLib and Features)
-----------------------------------------------

-- Use the player path found by the loader (fallback to Players.LocalPlayer)
local playerPath = getgenv().playerPath or Players.LocalPlayer

-- Load MacLib and create the main GUI window
local MacLib = loadstring(game:HttpGet("https://github.com/biggaboy212/Maclib/releases/latest/download/maclib.txt"))()
local Window = MacLib:Window({
	Title = "Collapse | universal",
	Subtitle = "| Made by Finny <3",
	Size = UDim2.fromOffset(800, 500),
	DragStyle = 2,
	DisabledWindowControls = {},
	ShowUserInfo = true,
	Keybind = Enum.KeyCode.RightShift,
	AcrylicBlur = false,
})

local globalSettings = {
	UIBlurToggle = Window:GlobalSetting({
		Name = "UI Blur",
		Default = Window:GetAcrylicBlurState(),
		Callback = function(bool)
			Window:SetAcrylicBlurState(bool)
			Window:Notify({
				Title = Window.Settings.Title,
				Description = (bool and "Enabled" or "Disabled") .. " UI Blur",
				Lifetime = 5
			})
		end,
	}),
	NotificationToggler = Window:GlobalSetting({
		Name = "Notifications",
		Default = Window:GetNotificationsState(),
		Callback = function(bool)
			Window:SetNotificationsState(bool)
			Window:Notify({
				Title = Window.Settings.Title,
				Description = (bool and "Enabled" or "Disabled") .. " Notifications",
				Lifetime = 5
			})
		end,
	}),
	ShowUserInfo = Window:GlobalSetting({
		Name = "Show User Info",
		Default = Window:GetUserInfoState(),
		Callback = function(bool)
			Window:SetUserInfoState(bool)
			Window:Notify({
				Title = Window.Settings.Title,
				Description = (bool and "Showing" or "Redacted") .. " User Info",
				Lifetime = 5
			})
		end,
	})
}

---------------------------------------------------
-- Create Tab Groups and Tabs
---------------------------------------------------
local tabGroups = {
	Aim = Window:TabGroup(),
	World = Window:TabGroup(),
	Other = Window:TabGroup()
}
local tabs = {
	Main = tabGroups.Aim:Tab({ Name = "Main", Image = "rbxassetid://99275039709063" }),
	Visuals = tabGroups.World:Tab({ Name = "Visuals", Image = "rbxassetid://104811813262009" }),
	Player = tabGroups.Other:Tab({ Name = "Player", Image = "rbxassetid://603107593" }),
	Settings = tabGroups.Other:Tab({ Name = "Settings", Image = "rbxassetid://110807522910450" })
}
tabs.Settings:InsertConfigSection("Left")

---------------------------------------------------
-- Aim Assist Section
---------------------------------------------------
if not game:IsLoaded() then 
	game.Loaded:Wait()
end

local Camera = workspace.CurrentCamera
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
-- Use the found player path for LocalPlayer throughout.
local LocalPlayer = playerPath
local Mouse = LocalPlayer:GetMouse()

-- Aim Assist Settings
getgenv().aim_settings = {
	enabled = false,
	fov = 150,
	hitbox = "Head",  -- options: "Head", "HumanoidRootPart", "Random", "Nearest"
	fovcircle = false,
	aimKey = Enum.KeyCode.E,
	method = "Camera",  -- "Camera" or "Mouse"
	fovThickness = 1,
	fovCircleColor = Color3.fromRGB(255,255,255),
	fovCircleFilled = false,
	fovCircleTransparency = 1
}
local currentAimKey = getgenv().aim_settings.aimKey
getgenv().stickyAim_enabled = false
getgenv().boxESPFilled = getgenv().boxESPFilled or false

-- Create FOV Circle drawing for Aim Assist
local aimAssistCircle = Drawing.new("Circle")
aimAssistCircle.Visible = false
aimAssistCircle.Thickness = getgenv().aim_settings.fovThickness
aimAssistCircle.Color = getgenv().aim_settings.fovCircleColor
aimAssistCircle.Transparency = getgenv().aim_settings.fovCircleTransparency
aimAssistCircle.Filled = getgenv().aim_settings.fovCircleFilled
aimAssistCircle.NumSides = 64

local currentTarget = nil
local Aiming = false
local randomPart = nil

---------------------------------------------------
-- Helper Functions for Aim Targeting
---------------------------------------------------
local function GetRandomPartFromCharacter(character)
	local partsList = {"Head", "HumanoidRootPart", "Right Leg", "Left Leg", "Right Arm", "Left Arm"}
	local available = {}
	for _, partName in ipairs(partsList) do
		local part = character:FindFirstChild(partName)
		if part then
			table.insert(available, part)
		end
	end
	if #available > 0 then
		return available[math.random(1, #available)]
	else
		return character:FindFirstChild("Head")
	end
end

local function GetNearestPartFromCharacter(character, mousePos)
	local partsList = {"Head", "HumanoidRootPart", "Right Arm", "Left Arm", "Right Leg", "Left Leg"}
	local bestPart = nil
	local bestDistance = math.huge
	for _, partName in ipairs(partsList) do
		local part = character:FindFirstChild(partName)
		if part then
			local screenPos, onScreen = Camera:WorldToViewportPoint(part.Position)
			if onScreen then
				local dist = (mousePos - Vector2.new(screenPos.X, screenPos.Y)).Magnitude
				if dist < bestDistance then
					bestDistance = dist
					bestPart = part
				end
			end
		end
	end
	return bestPart or character:FindFirstChild("Head")
end

---------------------------------------------------
-- Aiming Functionality
---------------------------------------------------
local function AimLock()
	local mousePos = UserInputService:GetMouseLocation()
	
	if getgenv().stickyAim_enabled and currentTarget and currentTarget.Character and currentTarget.Character:FindFirstChild(getgenv().aim_settings.hitbox) then
		local pos = Camera.CFrame.Position
		local targetPart = currentTarget.Character:FindFirstChild(getgenv().aim_settings.hitbox)
		if targetPart then
			Camera.CFrame = CFrame.new(pos, targetPart.Position)
			return
		end
	end

	local candidateTarget = nil
	local targetPart = nil
	local bestDistance = math.huge
	local mousePos = UserInputService:GetMouseLocation()

	for _, v in pairs(Players:GetPlayers()) do
		if v ~= LocalPlayer and v.Character then
			local candidatePart = nil
			if getgenv().aim_settings.hitbox == "Random" then
				candidatePart = v.Character:FindFirstChild("HumanoidRootPart")
			else
				candidatePart = v.Character:FindFirstChild(getgenv().aim_settings.hitbox)
			end
			if candidatePart then
				local screenPos, onScreen = Camera:WorldToViewportPoint(candidatePart.Position)
				if onScreen then
					local distance = (mousePos - Vector2.new(screenPos.X, screenPos.Y)).Magnitude
					if distance <= getgenv().aim_settings.fov and distance < bestDistance then
						bestDistance = distance
						candidateTarget = v
					end
				end
			end
		end
	end

	if candidateTarget then
		if getgenv().aim_settings.hitbox == "Random" then
			if not randomPart then
				randomPart = GetRandomPartFromCharacter(candidateTarget.Character)
			end
			targetPart = randomPart
		else
			targetPart = candidateTarget.Character:FindFirstChild(getgenv().aim_settings.hitbox)
		end
	end

	currentTarget = candidateTarget
	if currentTarget and currentTarget.Character and targetPart then
		local pos = Camera.CFrame.Position
		Camera.CFrame = CFrame.new(pos, targetPart.Position)
	end
end

---------------------------------------------------
-- RenderStepped Updates for Aim and FOV Circle
---------------------------------------------------
RunService.RenderStepped:Connect(function(delta)
	aimAssistCircle.Position = UserInputService:GetMouseLocation()
	aimAssistCircle.Radius = getgenv().aim_settings.fov
	aimAssistCircle.Visible = getgenv().aim_settings.fovcircle
	aimAssistCircle.Thickness = getgenv().aim_settings.fovThickness
	aimAssistCircle.Color = getgenv().aim_settings.fovCircleColor
	aimAssistCircle.Transparency = getgenv().aim_settings.fovCircleTransparency
	aimAssistCircle.Filled = getgenv().aim_settings.fovCircleFilled

	if getgenv().aim_settings.enabled and Aiming then
		AimLock()
	end
end)

---------------------------------------------------
-- Standard ESP Rendering (Box, Tracers, Healthbar, etc.)
---------------------------------------------------
local ESP = {
    Enabled = true,
    Box = {
        Enabled = false,  -- Box ESP only runs when toggled on.
        Color = Color3.fromRGB(255, 255, 255),
        Thickness = 1,
        Outlines = true,
        OutlineThickness = 0
    },
    Tool = {
        Enabled = false,
        Color = Color3.fromRGB(255, 255, 255)
    },
    Distance = {
        Enabled = false,
        Color = Color3.fromRGB(255, 255, 255)
    },
    Tracers = {
        Enabled = false,
        Color = Color3.fromRGB(255, 255, 255),
        Thickness = 1,
        Outlines = true,
        OutlineThickness = 0
    },
    HealthBar = {
        Enabled = false,
        Color = Color3.fromRGB(0, 255, 0),
        Outlines = true,
        ShowNumber = true,
        NumberColor = Color3.fromRGB(255, 255, 255)
    },
    Name = { -- Name ESP settings
        Enabled = false,
        Color = Color3.fromRGB(255, 255, 255),
        Size = 12,
        Font = 2,
        Outline = true,
    }
}

local currentTracerPosition = "Bottom"
local ESPUpdateRate = 0.01
local lastESPUpdate = 0

do
    local function AddESP(Player)
        local BoxOutline = Drawing.new("Square")
        local Box = Drawing.new("Square")
        local TracerOutline = Drawing.new("Line")
        local Tracer = Drawing.new("Line")
        local HealthBarOutline = Drawing.new("Square")
        local HealthBar = Drawing.new("Square")
        local ToolText = Drawing.new("Text")
        local DistanceText = Drawing.new("Text")
        local HealthText = Drawing.new("Text")
        local NameESPText = Drawing.new("Text")
        NameESPText.Size = ESP.Name.Size
        NameESPText.Center = true
        NameESPText.Outline = ESP.Name.Outline
        NameESPText.Font = ESP.Name.Font
        NameESPText.Color = ESP.Name.Color
        NameESPText.Text = Player.Name
        NameESPText.Visible = ESP.Name.Enabled
        local Connection

        Box.Filled = false
        HealthBarOutline.Filled = false
        HealthBarOutline.Color = Color3.new(0, 0, 0)
        HealthBar.Filled = true
        HealthBar.ZIndex = 5

        HealthText.Size = 10
        HealthText.Center = true
        HealthText.Outline = true
        HealthText.Font = 2
        HealthText.Color = ESP.HealthBar.NumberColor

        ToolText.Size = 13
        ToolText.Center = true
        ToolText.Outline = true
        ToolText.Font = 2
        ToolText.Color = ESP.Tool.Color

        DistanceText.Size = 11
        DistanceText.Center = true
        DistanceText.Outline = true
        DistanceText.Font = 2
        DistanceText.Color = ESP.Distance.Color

        local function HideESP()
            BoxOutline.Visible = false
            Box.Visible = false
            TracerOutline.Visible = false
            Tracer.Visible = false
            HealthBarOutline.Visible = false
            HealthBar.Visible = false
            ToolText.Visible = false
            DistanceText.Visible = false
            HealthText.Visible = false
            NameESPText.Visible = false
        end

        local function DestroyESP()
            BoxOutline:Remove()
            Box:Remove()
            TracerOutline:Remove()
            Tracer:Remove()
            HealthBarOutline:Remove()
            HealthBar:Remove()
            ToolText:Remove()
            DistanceText:Remove()
            HealthText:Remove()
            NameESPText:Remove()
            if Connection then Connection:Disconnect() end
        end

        local updateAccumulator = 0
        Connection = RunService.RenderStepped:Connect(function(delta)
            updateAccumulator = updateAccumulator + delta
            if updateAccumulator < ESPUpdateRate then return end
            updateAccumulator = 0

            if not ESP.Enabled then return HideESP() end
            if not Player or not Player.Parent then return DestroyESP() end
            if not (Player.Character and Player.Character:FindFirstChild("Head") and Player.Character:FindFirstChild("Humanoid") and Player.Character.Humanoid.Health > 0) then
                return HideESP()
            end

            local HumanoidRootPart = Player.Character:FindFirstChild("HumanoidRootPart")
            if not HumanoidRootPart then return HideESP() end

            local ScreenPosition, OnScreen = Camera:WorldToViewportPoint(HumanoidRootPart.Position)
            if not OnScreen then return HideESP() end

            local FrustumHeight = math.tan(math.rad(Camera.FieldOfView * 0.5)) * 2 * ScreenPosition.Z
            -- Revert Box ESP size to original: horizontal multiplier = 5, vertical = 6.
            local Size = Camera.ViewportSize.Y / FrustumHeight * Vector2.new(5,6)
            local Position = Vector2.new(ScreenPosition.X, ScreenPosition.Y) - Size / 2

            if ESP.Box.Enabled then
                -- Standard 2D box drawing.
                BoxOutline.Color = ESP.Box.Color
                Box.Color = ESP.Box.Color
                BoxOutline.Visible = ESP.Box.Outlines
                BoxOutline.Thickness = ESP.Box.Thickness + ESP.Box.OutlineThickness
                BoxOutline.Position = Position
                BoxOutline.Size = Size

                Box.Visible = true
                Box.Position = Position
                Box.Size = Size
                Box.Thickness = ESP.Box.Thickness
                if getgenv().boxESPFilled then
                    Box.Filled = true
                    Box.FillTransparency = 0.2
                else
                    Box.Filled = false
                end
            else
                Box.Visible = false
                BoxOutline.Visible = false
            end

            if ESP.Tool.Enabled then
                ToolText.Visible = true
                ToolText.Text = (Player.Character and Player.Character:FindFirstChildOfClass("Tool") and Player.Character:FindFirstChildOfClass("Tool").Name) or "None"
                ToolText.Position = Vector2.new(Position.X + (Size.X / 2), Position.Y + Size.Y + 2)
                ToolText.Color = ESP.Tool.Color
            else
                ToolText.Visible = false
            end

            if ESP.Distance.Enabled then
                DistanceText.Visible = true
                local dist = 0
                if Player.Character and Player.Character:FindFirstChild("HumanoidRootPart") and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
                    dist = math.floor((Player.Character.HumanoidRootPart.Position - LocalPlayer.Character.HumanoidRootPart.Position).Magnitude)
                end
                DistanceText.Text = tostring(dist) .. "studs"
                DistanceText.Position = Vector2.new(Position.X + (Size.X / 2), Position.Y - 35)
                DistanceText.Color = ESP.Distance.Color
            else
                DistanceText.Visible = false
            end

            if ESP.Tracers.Enabled then
                local tracerFrom
                if currentTracerPosition == "Bottom" then
                    tracerFrom = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y)
                elseif currentTracerPosition == "Middle" then
                    tracerFrom = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)
                elseif currentTracerPosition == "Top" then
                    tracerFrom = Vector2.new(Camera.ViewportSize.X / 2, 0)
                elseif currentTracerPosition == "Mouse" then
                    tracerFrom = UserInputService:GetMouseLocation()
                end

                TracerOutline.Color = ESP.Tracers.Color
                TracerOutline.Visible = ESP.Tracers.Outlines
                TracerOutline.Thickness = ESP.Tracers.Thickness + ESP.Tracers.OutlineThickness
                TracerOutline.From = tracerFrom
                TracerOutline.To = Vector2.new(ScreenPosition.X, Position.Y + Size.Y)

                Tracer.Visible = true
                Tracer.Color = ESP.Tracers.Color
                Tracer.Thickness = ESP.Tracers.Thickness
                Tracer.From = tracerFrom
                Tracer.To = Vector2.new(TracerOutline.To.X, TracerOutline.To.Y)
            else
                TracerOutline.Visible = false
                Tracer.Visible = false
            end

            if ESP.HealthBar.Enabled then
                local health = Player.Character.Humanoid.Health
                local maxHealth = Player.Character.Humanoid.MaxHealth
                local healthPercent = math.clamp(health / maxHealth, 0, 1)
                -- Health bar's full size matches the box's height,
                -- but its width is set to half (3 instead of 6).
                local healthBarWidth = 3
                local healthBarHeight = Size.Y
                local healthBarX = Position.X - healthBarWidth - 2
                local healthBarY = Position.Y

                HealthBarOutline.Visible = ESP.HealthBar.Outlines
                HealthBarOutline.Position = Vector2.new(healthBarX, healthBarY)
                HealthBarOutline.Size = Vector2.new(healthBarWidth, healthBarHeight)
                HealthBarOutline.Thickness = 1
                HealthBarOutline.Filled = true

                HealthBar.Visible = true
                local filledHeight = healthBarHeight * healthPercent
                HealthBar.Position = Vector2.new(healthBarX, healthBarY + (healthBarHeight - filledHeight))
                HealthBar.Size = Vector2.new(healthBarWidth, filledHeight)
                HealthBar.Color = ESP.HealthBar.Color

                HealthText.Visible = ESP.HealthBar.ShowNumber
                HealthText.Text = tostring(math.floor(health))
                HealthText.Position = Vector2.new(healthBarX + healthBarWidth/2, healthBarY - 15)
            else
                HealthBarOutline.Visible = false
                HealthBar.Visible = false
                HealthText.Visible = false
            end

            NameESPText.Visible = ESP.Name.Enabled
            if ESP.Name.Enabled then
                NameESPText.Text = Player.Name
                NameESPText.Position = Vector2.new(Position.X + (Size.X / 2), Position.Y - 20)
            end
        end)
    end

    for i, v in pairs(Players:GetPlayers()) do 
        if v ~= LocalPlayer then AddESP(v) end
    end
    Players.PlayerAdded:Connect(function(v)
        AddESP(v)
    end)
end

---------------------------------------------------
-- Chams Functions (Highlight-based ESP)
---------------------------------------------------
local chamsStorage = nil
local chamsConnections = {}
local chamsUpdateLoop = nil

local function UpdateChamsColors()
    while chamsStorage and chamsStorage.Parent do
        for _, highlight in pairs(chamsStorage:GetChildren()) do
            if highlight:IsA("Highlight") then
                local newColor = getgenv().chamsColor or Color3.fromRGB(255,255,255)
                highlight.FillColor = newColor
                highlight.OutlineColor = newColor
            end
        end
        task.wait(1)
    end
end

local function EnableChams()
    local CoreGui = game:GetService("CoreGui")
    chamsStorage = Instance.new("Folder")
    chamsStorage.Parent = CoreGui
    chamsStorage.Name = "Highlight_Storage"

    local function createHighlight(plr)
        local highlight = Instance.new("Highlight")
        highlight.Name = plr.Name
        highlight.DepthMode = "AlwaysOnTop"
        highlight.FillTransparency = (getgenv().chamsFillEnabled and 0.8 or 1)
        highlight.OutlineColor = Color3.fromRGB(255, 255, 255)
        highlight.OutlineTransparency = 0
        highlight.Parent = chamsStorage

        if plr.Character then
            highlight.Adornee = plr.Character
        end

        chamsConnections[plr] = plr.CharacterAdded:Connect(function(char)
            highlight.Adornee = char
        end)
    end

    for _, plr in pairs(game:GetService("Players"):GetPlayers()) do
        if plr ~= game:GetService("Players").LocalPlayer then
            createHighlight(plr)
        end
    end

    game:GetService("Players").PlayerAdded:Connect(function(plr)
        if plr ~= game:GetService("Players").LocalPlayer then
            createHighlight(plr)
        end
    end)

    if not chamsUpdateLoop then
        chamsUpdateLoop = task.spawn(UpdateChamsColors)
    end
end

local function DisableChams()
    if chamsStorage then
        chamsStorage:Destroy()
        chamsStorage = nil
    end
    for plr, conn in pairs(chamsConnections) do
        if conn then
            conn:Disconnect()
        end
    end
    chamsConnections = {}
    if chamsUpdateLoop then
        chamsUpdateLoop = nil
    end
end

---------------------------------------------------
-- Input Event Listeners
---------------------------------------------------
UserInputService.InputBegan:Connect(function(input, gameProcessed)
	if gameProcessed then return end
	if (input.KeyCode and input.KeyCode == currentAimKey) or (input.UserInputType and input.UserInputType == currentAimKey) then
		Aiming = true
		if getgenv().aim_settings.hitbox == "Random" then
		    randomPart = nil
		end
	end
end)

UserInputService.InputEnded:Connect(function(input, gameProcessed)
	if gameProcessed then return end
	if (input.KeyCode and input.KeyCode == currentAimKey) or (input.UserInputType and input.UserInputType == currentAimKey) then
		Aiming = false
		currentTarget = nil
		randomPart = nil
	end
end)

---------------------------------------------------
-- GUI: Main Tab (Aim Assist)
---------------------------------------------------
local aimBasic = tabs.Main:Section({ Side = "Left" })
aimBasic:Toggle({
	Name = "Aim Assist",
	Default = false,
	Callback = function(Value)
		getgenv().aim_settings.enabled = Value
		if not Value then
			Aiming = false
			currentTarget = nil
		end
	end,
}, "AimAssistToggle")

aimBasic:Keybind({
	Name = "Aim Key",
	Default = currentAimKey,
	Callback = function(binded)
		getgenv().aim_settings.aimKey = binded
		currentAimKey = binded
	end,
	onBinded = function(bind)
		getgenv().aim_settings.aimKey = bind
		currentAimKey = bind
	end,
	onBindHeld = function() return Aiming, currentAimKey end,
}, "AimKey")

aimBasic:Toggle({
	Name = "FOV Circle",
	Default = false,
	Callback = function(Value)
		getgenv().aim_settings.fovcircle = Value
	end,
}, "FOVCircleToggle")

aimBasic:Slider({
	Name = "FOV Size",
	Default = getgenv().aim_settings.fov,
	Minimum = 1,
	Maximum = 800,
	DisplayMethod = "Value",
	Precision = 0,
	Callback = function(Value)
		getgenv().aim_settings.fov = Value
		Window:Notify({ Title = "FOV Size", Description = "FOV size set to: " .. tostring(Value), Lifetime = 5 })
	end,
}, "FOVSizeSlider")

-- Aim Assist Customizations (Right Side)
local aimFOV = tabs.Main:Section({ Side = "Right" })
aimFOV:Dropdown({
	Name = "Aim Assist Method",
	Multi = false,
	Required = true,
	Search = true,
	Default = "Camera",
	Options = {"Camera", "Mouse"},
	Callback = function(Value)
		getgenv().aim_settings.method = Value
	end,
}, "AimMethodDropdown")

aimFOV:Toggle({
    Name = "Sticky Aim",
    Default = false,
    Callback = function(Value)
         getgenv().stickyAim_enabled = Value
    end,
}, "StickyAimToggle")

aimFOV:Slider({
	Name = "FOV Thickness",
	Default = getgenv().aim_settings.fovThickness,
	Minimum = 1,
	Maximum = 5,
	DisplayMethod = "Value",
	Precision = 0,
	Callback = function(Value)
		getgenv().aim_settings.fovThickness = Value
	end,
}, "FOVThicknessSlider")

aimFOV:Colorpicker({
	Name = "FOV Circle Color",
	Default = getgenv().aim_settings.fovCircleColor,
	Alpha = 0,
	Callback = function(color, alpha)
		getgenv().aim_settings.fovCircleColor = color
	end,
}, "FOVCircleColorPicker")

aimFOV:Toggle({
	Name = "FOV Circle Filled",
	Default = getgenv().aim_settings.fovCircleFilled,
	Callback = function(Value)
		getgenv().aim_settings.fovCircleFilled = Value
	end,
}, "FOVCircleFilledToggle")

aimFOV:Slider({
	Name = "FOV Transparency",
	Default = getgenv().aim_settings.fovCircleTransparency,
	Minimum = 0.1,
	Maximum = 1,
	DisplayMethod = "Value",
	Precision = 2,
	Callback = function(Value)
		getgenv().aim_settings.fovCircleTransparency = Value
	end,
}, "FOVCircleTransparencySlider")

---------------------------------------------------
-- GUI: Visuals Tab
---------------------------------------------------
local visualsLeft = tabs.Visuals:Section({ Side = "Left" })
local visualsRight = tabs.Visuals:Section({ Side = "Right" })

visualsLeft:Toggle({
	Name = "Box ESP",
	Default = false,
	Callback = function(Value)
		ESP.Box.Enabled = Value
		Window:Notify({ Title = "Box ESP", Description = (Value and "Enabled" or "Disabled"), Lifetime = 5 })
	end,
}, "BoxESPToggle")

visualsLeft:Toggle({
	Name = "Tracers",
	Default = false,
	Callback = function(Value)
		ESP.Tracers.Enabled = Value
		Window:Notify({ Title = "Tracers", Description = (Value and "Enabled" or "Disabled"), Lifetime = 5 })
	end,
}, "TracersToggle")

visualsLeft:Toggle({
	Name = "Healthbar",
	Default = false,
	Callback = function(Value)
		ESP.HealthBar.Enabled = Value
		ESP.HealthBar.ShowNumber = Value
		Window:Notify({ Title = "Healthbar", Description = (Value and "Enabled" or "Disabled"), Lifetime = 5 })
	end,
}, "HealthbarToggle")

visualsLeft:Toggle({
	Name = "Tool ESP",
	Default = false,
	Callback = function(Value)
		ESP.Tool.Enabled = Value
		Window:Notify({ Title = "Tool ESP", Description = (Value and "Enabled" or "Disabled"), Lifetime = 5 })
	end,
}, "ToolESPToggle")

visualsLeft:Toggle({
	Name = "Distance ESP",
	Default = false,
	Callback = function(Value)
		ESP.Distance.Enabled = Value
		Window:Notify({ Title = "Distance ESP", Description = (Value and "Enabled" or "Disabled"), Lifetime = 5 })
	end,
}, "DistanceESPToggle")

visualsLeft:Toggle({
	Name = "Name ESP",
	Default = false,
	Callback = function(Value)
		ESP.Name.Enabled = Value
		Window:Notify({ Title = "Name ESP", Description = (Value and "Enabled" or "Disabled"), Lifetime = 5 })
	end,
}, "NameESPToggle")

visualsLeft:Toggle({
    Name = "Chams",
    Default = false,
    Callback = function(Value)
         getgenv().chamsEnabled = Value
         if Value then
              EnableChams()
         else
              DisableChams()
         end
         Window:Notify({ Title = "Chams", Description = (Value and "Enabled" or "Disabled"), Lifetime = 5 })
    end,
}, "ChamsToggle")

visualsRight:Colorpicker({
    Name = "Box ESP Color",
    Default = ESP.Box.Color,
    Alpha = 0,
    Callback = function(color, alpha)
         ESP.Box.Color = color
    end,
}, "BoxESPColor")

visualsRight:Colorpicker({
    Name = "Tracers Color",
    Default = ESP.Tracers.Color,
    Alpha = 0,
    Callback = function(color, alpha)
         ESP.Tracers.Color = color
    end,
}, "TracersColor")

visualsRight:Colorpicker({
    Name = "HealthBar ESP Color",
    Default = ESP.HealthBar.Color,
    Alpha = 0,
    Callback = function(color, alpha)
         ESP.HealthBar.Color = color
    end,
}, "HealthBarESPColor")

visualsRight:Colorpicker({
    Name = "Tool ESP Color",
    Default = ESP.Tool.Color,
    Alpha = 0,
    Callback = function(color, alpha)
         ESP.Tool.Color = color
    end,
}, "ToolESPColor")

visualsRight:Colorpicker({
    Name = "Distance ESP Color",
    Default = ESP.Distance.Color,
    Alpha = 0,
    Callback = function(color, alpha)
         ESP.Distance.Color = color
    end,
}, "DistanceESPColor")

-- Insert Name ESP Color picker between Distance and Chams.
visualsRight:Colorpicker({
    Name = "Name ESP Color",
    Default = ESP.Name.Color,
    Alpha = 0,
    Callback = function(color, alpha)
         ESP.Name.Color = color
    end,
}, "NameESPColor")

visualsRight:Colorpicker({
    Name = "Chams Color",
    Default = Color3.fromRGB(255,255,255),
    Alpha = 0,
    Callback = function(color, alpha)
         getgenv().chamsColor = color
    end,
}, "ChamsColor")

local espCustom = tabs.Visuals:Section({ Side = "Left", Title = "ESP Customization", VerticalOrder = true })

espCustom:Dropdown({
    Name = "Tracer Origin",
    Multi = false,
    Required = true,
    Search = true,
    Default = "Bottom",
    Options = {"Bottom", "Middle", "Top", "Mouse"},
    Callback = function(Value)
        currentTracerPosition = Value
    end,
}, "TracerOriginDropdown")

espCustom:Slider({
    Name = "Tracer Thickness",
    Default = ESP.Tracers.Thickness,
    Minimum = 1,
    Maximum = 5,
    DisplayMethod = "Value",
    Precision = 0,
    Callback = function(Value)
         ESP.Tracers.Thickness = Value
    end,
}, "TracerThicknessSlider")

espCustom:Dropdown({
    Name = "Box ESP Type",
    Multi = false,
    Required = true,
    Search = true,
    Default = "2D",
    Options = {"2D", "3D", "Corners"},
    Callback = function(Value)
         getgenv().boxESPType = Value
    end,
}, "BoxESPTypeDropdown")

espCustom:Toggle({
    Name = "Box ESP Filled",
    Default = false,
    Callback = function(Value)
         getgenv().boxESPFilled = Value
    end,
}, "BoxESPFilledToggle")

espCustom:Toggle({
    Name = "Chams Fill",
    Default = false,
    Callback = function(Value)
         getgenv().chamsFillEnabled = Value
         if chamsStorage then
             for _, highlight in pairs(chamsStorage:GetChildren()) do
                 if highlight:IsA("Highlight") then
                     highlight.FillTransparency = (Value and 0.8 or 1)
                 end
             end
         end
    end,
}, "ChamsFillToggle")

---------------------------------------------------
-- GUI: Player Tab (Other)
---------------------------------------------------
local playerSection = tabs.Player:Section({ Side = "Left" })

local defaultWalkSpeed = 16
local defaultJumpPower = 50

playerSection:Toggle({
    Name = "Speed",
    Default = false,
    Callback = function(Value)
         getgenv().speedEnabled = Value
         Window:Notify({ Title = "Speed", Description = (Value and "Enabled" or "Disabled"), Lifetime = 5 })
    end,
}, "SpeedToggle")

playerSection:Slider({
    Name = "Speed Value",
    Default = 16,
    Minimum = 16,
    Maximum = 500,
    DisplayMethod = "Value",
    Precision = 0,
    Callback = function(Value)
         getgenv().speedValue = Value
         Window:Notify({ Title = "Speed Value", Description = "Speed set to: " .. tostring(Value), Lifetime = 5 })
    end,
}, "SpeedSlider")

local jumpSection = tabs.Player:Section({ Side = "Left", Title = "Jump" })
jumpSection:Toggle({
    Name = "Jump Height",
    Default = false,
    Callback = function(Value)
         getgenv().jumpEnabled = Value
         Window:Notify({ Title = "Jump Height", Description = (Value and "Enabled" or "Disabled"), Lifetime = 5 })
    end,
}, "JumpToggle")

jumpSection:Slider({
    Name = "Jump Height Value",
    Default = 50,
    Minimum = 50,
    Maximum = 250,
    DisplayMethod = "Value",
    Precision = 0,
    Callback = function(Value)
         getgenv().jumpValue = Value
         Window:Notify({ Title = "Jump Height", Description = "Jump Height set to: " .. tostring(Value), Lifetime = 5 })
    end,
}, "JumpSlider")

RunService.RenderStepped:Connect(function()
    local character = LocalPlayer.Character
    if character then
         local humanoid = character:FindFirstChild("Humanoid")
         if humanoid then
              if getgenv().speedEnabled then
                   humanoid.WalkSpeed = getgenv().speedValue or defaultWalkSpeed
              else
                   humanoid.WalkSpeed = defaultWalkSpeed
              end
              if getgenv().jumpEnabled then
                   humanoid.JumpPower = getgenv().jumpValue or defaultJumpPower
              else
                   humanoid.JumpPower = defaultJumpPower
              end
         end
    end
end)

---------------------------------------------------
-- Finalize GUI
---------------------------------------------------
tabs.Main:Select()

Window:Notify({
	Title = "Collapse:universal",
	Description = "Script loaded successfully! - Made by Finny <3",
	Lifetime = 5
})
