-- wait for the game to load
repeat task.wait(0.25) until game:IsLoaded();

-- three loadstrings: Fluent‑Renewed library, SaveManager & InterfaceManager
local Library          = loadstring(game:HttpGetAsync("https://github.com/ActualMasterOogway/Fluent-Renewed/releases/latest/download/Fluent.luau"))()
local SaveManager      = loadstring(game:HttpGetAsync("https://raw.githubusercontent.com/ActualMasterOogway/Fluent-Renewed/master/Addons/SaveManager.luau"))()
local InterfaceManager = loadstring(game:HttpGetAsync("https://raw.githubusercontent.com/ActualMasterOogway/Fluent-Renewed/master/Addons/InterfaceManager.luau"))()

-- create the window at 1200×800
local Window = Library:CreateWindow{
    Title       = "Pluto | Grow a garden",
    SubTitle    = "Made by Finny<3",
    TabWidth    = 120,
    Size        = UDim2.fromOffset(1200, 800),
    Resize      = true,
    MinSize     = Vector2.new(470, 380),
    Acrylic     = true,
    Theme       = "Amethyst Dark",
    MinimizeKey = Enum.KeyCode.RightShift,
}

-- create tabs exactly like the example
local Tabs = {
    Status   = Window:CreateTab{ Title = "Status",   Icon = "phosphor-chart-line" },
    Farm     = Window:CreateTab{ Title = "Farm",     Icon = "phosphor-farm"       },
    Settings = Window:CreateTab{ Title = "Settings", Icon = "settings"            },
}

-- add an uptime paragraph in the Status tab
local UptimeParagraph = Tabs.Status:CreateParagraph("Uptime", {
    Title   = "Uptime",
    Content = "00:00:00"
})
local startTime = tick()
task.spawn(function()
    while true do
        task.wait(1)
        local elapsed = math.floor(tick() - startTime)
        local h = math.floor(elapsed / 3600)
        local m = math.floor((elapsed % 3600) / 60)
        local s = elapsed % 60
        UptimeParagraph:SetValue(string.format("%02d:%02d:%02d", h, m, s))
    end
end)

-- build out the Farm tab
do
    local F = Tabs.Farm

    F:CreateToggle("AutoCollect", { Title = "Auto Collect", Default = false })
     :OnChanged(function(v) print("Auto Collect:", v) end)

    F:CreateToggle("AutoSell", { Title = "Auto Sell", Default = false })
     :OnChanged(function(v) print("Auto Sell:", v) end)

    F:CreateDropdown("SellItems", {
        Title       = "Sell Items",
        Description = "Select which items to sell",
        Values      = {"ItemA","ItemB","ItemC"},
        Multi       = true,
        Default     = {},
    }):OnChanged(function(sel)
        local out = {}
        for k in pairs(sel) do table.insert(out, k) end
        print("Sell Items:", table.concat(out, ", "))
    end)

    F:CreateToggle("AutoBuyStock", { Title = "Auto Buy Stock", Default = false })
     :OnChanged(function(v) print("Auto Buy Stock:", v) end)

    F:CreateDropdown("BuyStockItems", {
        Title       = "Auto Buy Stock",
        Description = "Select which stock to buy",
        Values      = {"StockA","StockB","StockC"},
        Multi       = true,
        Default     = {},
    }):OnChanged(function(sel)
        local out = {}
        for k in pairs(sel) do table.insert(out, k) end
        print("Auto Buy Stock Items:", table.concat(out, ", "))
    end)
end

-- select the first tab
Window:SelectTab(1)

-- ─────── Save & Interface Config ─────────
SaveManager:SetLibrary(Library)
InterfaceManager:SetLibrary(Library)

SaveManager:IgnoreThemeSettings()
SaveManager:SetIgnoreIndexes{}

InterfaceManager:SetFolder("Pluto")
SaveManager:SetFolder("Pluto - Grow a garden")

InterfaceManager:BuildInterfaceSection(Tabs.Settings)
SaveManager:BuildConfigSection(Tabs.Settings)

-- ─────── Notifications ─────────
Library:Notify{ Title="Minimize Key", Content="Press RightShift to toggle the GUI", Duration=5 }
Library:Notify{ Title="Pluto Loaded",  Content="Script loaded successfully",    Duration=5 }

-- auto‑load any config marked for autoload
SaveManager:LoadAutoloadConfig()