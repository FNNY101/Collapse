-- wait for the game to load
repeat task.wait(0.25) until game:IsLoaded();

-- load Fluent
local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()

-- create the window at 500×300
local Window = Fluent:CreateWindow({
    Title       = "Pluto | Grow a garden",
    SubTitle    = "Made by Finny<3",
    TabWidth    = 120,
    Size        = UDim2.fromOffset(500, 300),   -- resized
    Acrylic     = true,
    Theme       = "Amethyst Dark",
    MinimizeKey = Enum.KeyCode.RightShift,
})

-- ... (earlier code unchanged)

task.spawn(function()
    if not getgenv().LoadedMobileUI then
        getgenv().LoadedMobileUI = true
        getgenv().Image    = "rbxassetid://5205790826"   -- updated icon ID
        getgenv().ToggleUI = "RightShift"

        local gui = Instance.new("ScreenGui")
        gui.Name = "OpenUI"
        gui.Parent = game:GetService("CoreGui")
        gui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

        local btn = Instance.new("ImageButton")
        btn.Parent               = gui
        btn.BackgroundColor3     = Color3.fromRGB(105,105,105)
        btn.BackgroundTransparency = 0.8
        btn.Position             = UDim2.new(0.9,0,0.1,0)
        btn.Size                 = UDim2.new(0,50,0,50)
        btn.Image                = getgenv().Image
        btn.Draggable            = true
        btn.Transparency         = 1

        local cr = Instance.new("UICorner")
        cr.CornerRadius = UDim.new(0,200)
        cr.Parent       = btn

        btn.MouseButton1Click:Connect(function()
            game:GetService("VirtualInputManager"):SendKeyEvent(true, getgenv().ToggleUI, false, game)
        end)
    end
end)


-- notifications
Fluent:Notify{ Title="Minimize Key", Content="Press RightShift to toggle the GUI", Duration=5 }
Fluent:Notify{ Title="Pluto Loaded", Content="Script loaded successfully", Duration=5 }

-- add tabs via the library’s AddTab API 
local Tabs = {
    Status = Window:AddTab({ Title = "Status", Icon = "phosphor-chart-line" }),
    Farm   = Window:AddTab({ Title = "Farm",   Icon = "phosphor-farm"   }),
}

-- build out the Farm tab instead of Status 
do
    local T = Tabs.Farm

    T:AddToggle("AutoCollect", {
        Title   = "Auto Collect",
        Default = false,
    }):OnChanged(function(v) print("Auto Collect:", v) end)

    T:AddToggle("AutoSell", {
        Title   = "Auto Sell",
        Default = false,
    }):OnChanged(function(v) print("Auto Sell:", v) end)

    T:AddDropdown("SellItems", {
        Title       = "Sell Items",
        Description = "Select which items to sell",
        Values      = {"ItemA","ItemB","ItemC"},
        Multi       = true,
        Default     = {},
    }):OnChanged(function(sel)
        local out = {}
        for k in pairs(sel) do table.insert(out, k) end
        print("Sell Items:", table.concat(out, ", "))
    end)

    T:AddToggle("AutoBuyStock", {
        Title   = "Auto Buy Stock",
        Default = false,
    }):OnChanged(function(v) print("Auto Buy Stock:", v) end)

    T:AddDropdown("BuyStockItems", {
        Title       = "Auto Buy Stock",
        Description = "Select which stock to buy",
        Values      = {"StockA","StockB","StockC"},
        Multi       = true,
        Default     = {},
    }):OnChanged(function(sel)
        local out = {}
        for k in pairs(sel) do table.insert(out, k) end
        print("Auto Buy Stock Items:", table.concat(out, ", "))
    end)
end

-- select the first tab
Window:SelectTab(1)